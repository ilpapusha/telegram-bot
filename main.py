import os
import asyncio
import logging
from typing import Dict, List, Tuple
from html import escape

from aiogram import Bot, Dispatcher, F, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo, InputMediaPhoto
from aiogram.client.default import DefaultBotProperties
from dotenv import load_dotenv

# ------------------ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ------------------
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID_ENV = os.getenv("ADMIN_ID")
if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ .env")
if not ADMIN_ID_ENV:
    raise RuntimeError("ADMIN_ID –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ .env")
ADMIN_ID = int(ADMIN_ID_ENV)

# –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: —Å—Å—ã–ª–∫–∞ –Ω–∞ –∫–æ–Ω—Ç–∞–∫—Ç –ø—Ä–æ–¥–∞–≤—Ü–∞ (–µ—Å–ª–∏ –Ω–µ—Ç username, –∏—Å–ø–æ–ª—å–∑—É–µ–º tg://user?id)
SELLER_LINK = os.getenv("SELLER_LINK") or f"tg://user?id={ADMIN_ID}"

logging.basicConfig(level=logging.INFO)
bot = Bot(BOT_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()

# ------------------ –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π ------------------
carts: Dict[int, List[Tuple[str, int]]] = {}
waiting_for_perfume: Dict[int, bool] = {}
current_perfume: Dict[int, str] = {}
waiting_for_full_bottle: Dict[int, bool] = {}

# ------------------ –ì–æ—Ç–æ–≤—ã–µ –Ω–∞–±–æ—Ä—ã (—Ç–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ) ------------------
# –ö–∞–∂–¥—ã–π –Ω–∞–±–æ—Ä: code, title, photo (file_id), items=[(–Ω–∞–∑–≤–∞–Ω–∏–µ, –º–ª), ...]
KITS = [
    {
        "code": "vostochny",
        "title": "üéÅ –ù–∞–±–æ—Ä ¬´–í–æ—Å—Ç–æ—á–Ω—ã–π¬ª",
        "photo": "AgACAgIAAxkBAAN_aNF8NzIeIItUw9J4P3oLvcshM7wAAsf2MRtqspFKEp0AAee2XsX8AQADAgADeQADNgQ",
        "items": [
            ("Montale Arabians Tonka", 5),
            ("Mancera Red Tobacco", 5),
            ("Parfums de Marly Althair", 5),
            ("Azzaro The Most Wanted Parfum", 5),
            ("Armani Stronger With You Absolutely", 5),
        ],
    },
    {
        "code": "svezhiy",
        "title": "üéÅ –ù–∞–±–æ—Ä ¬´–°–≤–µ–∂–∏–π¬ª",
        "photo": "AgACAgIAAxkBAAN9aNF8GK0h-cwWMHP6WkAlFwABQmwZAALF9jEbarKRShK5MEgD8MXBAQADAgADeQADNgQ",
        "items": [
            ("Dior Homme Cologne", 5),
            ("Parfums de Marly Greenley", 5),
            ("Prada L‚ÄôHomme L‚ÄôEau", 5),
            ("Armani Acqua Di Gio Profondo Parfum", 5),
            ("Jean Paul Gaultier Le Beau Le Parfum", 5),
        ],
    },
    {
        "code": "vecherniy",
        "title": "üéÅ –ù–∞–±–æ—Ä ¬´–í–µ—á–µ—Ä–Ω–∏–π¬ª",
        "photo": "AgACAgIAAxkBAAN4aNF5HwqkdgNcQjgg9gABSo25lFxfAAKw9jEbarKRSqr-Vm7eaG3mAQADAgADeQADNgQ",
        "items": [
            ("Armaf Club de Nuit Intense", 5),
            ("Jean Paul Gaultier Le Male Le Parfum", 5),
            ("Chanel Bleu de Chanel Eau de Parfum", 5),
            ("Yves Saint Laurent Myslf Eau de Parfum", 5),
            ("Tom Ford Noir", 5),
        ],
    },
    {
        "code": "komplimentarnyy",
        "title": "üéÅ –ù–∞–±–æ—Ä ¬´–ö–æ–º–ø–ª–∏–º–µ–Ω—Ç–∞—Ä–Ω—ã–π¬ª",
        "photo": "AgACAgIAAxkBAAOCaNF8eAd67W7XRioTneRMlxlJSb4AAsr2MRtqspFKaGxSSlgviZYBAAMCAAN5AAM2BA",
        "items": [
            ("Initio Side Effect", 5),
            ("Armaf Club de Nuit Intense", 5),
            ("Jean Paul Gaultier Le Male Le Parfum", 5),
            ("Prada L‚ÄôHomme L‚ÄôEau", 5),
            ("Yves Saint Laurent La Nuit de L‚ÄôHomme Eau de Parfum", 5),
        ],
    },
    {
        "code": "na_vse_sluchai",
        "title": "üéÅ –ù–∞–±–æ—Ä ¬´–ù–∞ –≤—Å–µ —Å–ª—É—á–∞–∏ –∂–∏–∑–Ω–∏¬ª",
        "photo": "AgACAgIAAxkBAAOEaNF8i5lVXVryRVLRgEMDH8EpLl8AAsv2MRtqspFKosf2SsGkXIoBAAMCAAN5AAM2BA",
        "items": [
            ("Montale Arabians Tonka", 5),
            ("Armaf Club de Nuit Intense", 5),
            ("Armani Acqua Di Gio Parfum", 5),
            ("Jean Paul Gaultier Le Male Le Parfum", 5),
            ("Chanel Bleu de Chanel Eau de Parfum", 5),
        ],
    },
    {
        "code": "big_g",
        "title": "üéÅ –ù–∞–±–æ—Ä ¬´BIG G¬ª",
        "photo": "AgACAgIAAxkBAAOGaNF8nCTpNhq-UNWry9jtTr8mTnAAAsz2MRtqspFKDfNtpsgRR90BAAMCAAN5AAM2BA",
        "items": [
            ("Parfums de Marly Layton", 5),
            ("Tom Ford Ombre Leather", 5),
            ("Azzaro The Most Wanted Parfum", 5),
        ],
    },
    {
        "code": "dzhentelmen",
        "title": "üéÅ –ù–∞–±–æ—Ä ¬´–î–∂–µ–Ω—Ç–µ–ª—å–º–µ–Ω¬ª",
        "photo": "AgACAgIAAxkBAAOIaNF8tAfhnzZUEA5IVrXE18KM9L8AAs32MRtqspFK5w3gcQQrVvMBAAMCAAN5AAM2BA",
        "items": [
            ("Parfums de Marly Sedley", 5),
            ("Prada L‚ÄôHomme", 5),
            ("Jean Paul Gaultier Le Male Le Parfum", 5),
        ],
    },
    {
        "code": "papochka",
        "title": "üéÅ –ù–∞–±–æ—Ä ¬´–ü–∞–ø–æ—á–∫–∞¬ª",
        "photo": "AgACAgIAAxkBAAOKaNF8yBFmwnJyKoc4jSiQXkYEbgsAAs72MRtqspFK2Y3owjZIH4cBAAMCAAN5AAM2BA",
        "items": [
            ("Parfums de Marly Altha√Ør", 5),
            ("Dior Homme Intense", 5),
            ("Mancera Red Tobacco", 5),
        ],
    },
]

# ------------------ –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ------------------
def main_menu_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üíâ –ö—É–ø–∏—Ç—å –Ω–∞ —Ä–æ—Å–ø–∏–≤", callback_data="buy_split")],
        [InlineKeyboardButton(text="üéÅ –ì–æ—Ç–æ–≤—ã–µ –Ω–∞–±–æ—Ä—ã", callback_data="show_kits")],
        [InlineKeyboardButton(text="üíé –ö—É–ø–∏—Ç—å —Ü–µ–ª—ã–π —Ñ–ª–∞–∫–æ–Ω", callback_data="buy_full")],
        [InlineKeyboardButton(text="üõí –ú–æ—è –∫–æ—Ä–∑–∏–Ω–∞", callback_data="show_cart")],
        [InlineKeyboardButton(text="üì® –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø—Ä–æ–¥–∞–≤—Ü–æ–º", url=SELLER_LINK)],
    ])

def volumes_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üíß 5 –º–ª",  callback_data="volume_5"),
            InlineKeyboardButton(text="üß™ 8 –º–ª",  callback_data="volume_8"),
            InlineKeyboardButton(text="üíé 18 –º–ª", callback_data="volume_18"),
        ],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="back_to_menu")],
    ])

def after_add_item_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë –∞—Ä–æ–º–∞—Ç", callback_data="add_more")],
        [InlineKeyboardButton(text="üõí –ú–æ—è –∫–æ—Ä–∑–∏–Ω–∞",          callback_data="show_cart")],
        [InlineKeyboardButton(text="‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑",       callback_data="checkout")],
        [InlineKeyboardButton(text="üì® –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø—Ä–æ–¥–∞–≤—Ü–æ–º", url=SELLER_LINK)],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –í –º–µ–Ω—é",               callback_data="back_to_menu")],
    ])

def cart_actions_kb(has_items: bool) -> InlineKeyboardMarkup:
    rows = []
    if has_items:
        rows.append([InlineKeyboardButton(text="‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="checkout")])
        rows.append([InlineKeyboardButton(text="üßπ –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data="clear_cart")])
    rows.append([InlineKeyboardButton(text="üì® –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø—Ä–æ–¥–∞–≤—Ü–æ–º", url=SELLER_LINK)])
    rows.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="back_to_menu")])
    return InlineKeyboardMarkup(inline_keyboard=rows)

def kits_list_kb() -> InlineKeyboardMarkup:
    rows = [[InlineKeyboardButton(text=kit["title"], callback_data=f"kit_view_{idx}")]
            for idx, kit in enumerate(KITS)]
    rows.append([InlineKeyboardButton(text="üõí –ú–æ—è –∫–æ—Ä–∑–∏–Ω–∞", callback_data="show_cart")])
    rows.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="back_to_menu")])
    return InlineKeyboardMarkup(inline_keyboard=rows)

def kit_view_kb(idx: int) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–∞–±–æ—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É", callback_data=f"kit_add_{idx}")],
        [InlineKeyboardButton(text="üõí –ú–æ—è –∫–æ—Ä–∑–∏–Ω–∞", callback_data="show_cart")],
        [InlineKeyboardButton(text="üì® –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø—Ä–æ–¥–∞–≤—Ü–æ–º", url=SELLER_LINK)],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="back_to_menu")],
    ])

# ------------------ –ö–æ–º–∞–Ω–¥—ã ------------------
@dp.message(Command("start"))
async def start_cmd(message: types.Message):
    uid = message.from_user.id
    waiting_for_perfume[uid] = False
    waiting_for_full_bottle[uid] = False
    current_perfume[uid] = ""
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞—Ä—Ñ—é–º–µ—Ä–Ω—ã–π –±–æ—Ç!\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –ø–æ–∫—É–ø–∫–∏:", reply_markup=main_menu_kb())

@dp.message(Command("menu"))
async def menu_cmd(message: types.Message):
    uid = message.from_user.id
    waiting_for_perfume[uid] = False
    waiting_for_full_bottle[uid] = False
    current_perfume[uid] = ""
    await message.answer("–ú–µ–Ω—é:", reply_markup=main_menu_kb())

# ----------- –†–û–°–ü–ò–í -----------
@dp.callback_query(F.data == "buy_split")
async def buy_split(call: types.CallbackQuery):
    uid = call.from_user.id
    carts.setdefault(uid, [])
    waiting_for_perfume[uid] = True
    waiting_for_full_bottle[uid] = False
    current_perfume[uid] = ""
    await call.message.edit_text(
        "üß¥ –í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–æ–∫—É–ø–∫—É –Ω–∞ —Ä–æ—Å–ø–∏–≤.\n\n"
        "‚úçÔ∏è <b>–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞—Ä–æ–º–∞—Ç–∞</b>, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É.\n"
        "–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ —è –ø—Ä–µ–¥–ª–æ–∂—É –≤—ã–±—Ä–∞—Ç—å –æ–±—ä—ë–º.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üõí –ú–æ—è –∫–æ—Ä–∑–∏–Ω–∞", callback_data="show_cart")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="back_to_menu")],
        ])
    )

@dp.message(F.text)
async def on_text(message: types.Message):
    uid = message.from_user.id

    # –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ ¬´—Ü–µ–ª–æ–º—É —Ñ–ª–∞–∫–æ–Ω—É¬ª
    if waiting_for_full_bottle.get(uid):
        username = message.from_user.username
        profile_link = f"https://t.me/{username}" if username else f"tg://user?id={uid}"
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –∫–ª–∏–µ–Ω—Ç—É", url=profile_link)]
        ])
        await bot.send_message(
            ADMIN_ID,
            "üì© <b>–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ü–µ–ª—ã–π —Ñ–ª–∞–∫–æ–Ω</b>\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username or '–±–µ–∑_username'}\n"
            f"üÜî ID: <code>{uid}</code>\n"
            f"‚úçÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ: {escape(message.text)}",
            reply_markup=kb
        )
        waiting_for_full_bottle[uid] = False
        await message.answer(
            "‚úÖ –°–ø–∞—Å–∏–±–æ! –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø—Ä–æ–¥–∞–≤—Ü—É.\n"
            "‚ÑπÔ∏è –ü—Ä–æ–¥–∞–≤–µ—Ü —É—Ç–æ—á–Ω–∏—Ç –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –∏ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üì® –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø—Ä–æ–¥–∞–≤—Ü–æ–º", url=SELLER_LINK)],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="back_to_menu")],
            ])
        )
        return

    # –í–≤–æ–¥ –∞—Ä–æ–º–∞—Ç–∞ –¥–ª—è —Ä–æ—Å–ø–∏–≤–∞
    if waiting_for_perfume.get(uid):
        perfume = (message.text or "").strip()
        if not perfume:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞—Ä–æ–º–∞—Ç–∞ —Ç–µ–∫—Å—Ç–æ–º.")
            return
        current_perfume[uid] = perfume
        waiting_for_perfume[uid] = False
        await message.answer(
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∞—Ä–æ–º–∞—Ç: <b>{escape(perfume)}</b>\n\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä—ë–º üëá",
            reply_markup=volumes_kb()
        )
        return

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é:", reply_markup=main_menu_kb())

@dp.callback_query(F.data.startswith("volume_"))
async def choose_volume(call: types.CallbackQuery):
    uid = call.from_user.id
    perfume = current_perfume.get(uid)
    if not perfume:
        await call.answer("–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞—Ä–æ–º–∞—Ç–∞.", show_alert=True)
        return

    volume_map = {"volume_5": 5, "volume_8": 8, "volume_18": 18}
    volume = volume_map.get(call.data, 0)
    if not volume:
        await call.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ–±—ä—ë–º", show_alert=True)
        return

    carts.setdefault(uid, []).append((perfume, volume))
    current_perfume[uid] = ""
    await call.message.edit_text(
        f"‚úÖ –í –∫–æ—Ä–∑–∏–Ω—É –¥–æ–±–∞–≤–ª–µ–Ω–æ: <b>{escape(perfume)}</b> ‚Äî <b>{volume} –º–ª</b>.\n\n–ß—Ç–æ –¥–∞–ª—å—à–µ?",
        reply_markup=after_add_item_kb()
    )

@dp.callback_query(F.data == "add_more")
async def add_more(call: types.CallbackQuery):
    uid = call.from_user.id
    waiting_for_perfume[uid] = True
    current_perfume[uid] = ""
    await call.message.edit_text(
        "‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ <b>—Å–ª–µ–¥—É—é—â–µ–≥–æ</b> –∞—Ä–æ–º–∞—Ç–∞ –¥–ª—è —Ä–æ—Å–ø–∏–≤–∞.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üõí –ú–æ—è –∫–æ—Ä–∑–∏–Ω–∞", callback_data="show_cart")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="back_to_menu")],
        ])
    )

@dp.callback_query(F.data == "show_cart")
async def show_cart(call: types.CallbackQuery):
    uid = call.from_user.id
    cart = carts.get(uid, [])
    if not cart:
        await call.message.edit_text("üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.", reply_markup=cart_actions_kb(False))
        return
    lines = [f"‚Ä¢ {escape(p)} ‚Äî <b>{v} –º–ª</b>" for p, v in cart]
    text = "üõí <b>–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞</b>:\n\n" + "\n".join(lines)
    await call.message.edit_text(text, reply_markup=cart_actions_kb(True))

@dp.callback_query(F.data == "clear_cart")
async def clear_cart(call: types.CallbackQuery):
    carts[call.from_user.id] = []
    await call.message.edit_text("üßπ –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞.", reply_markup=cart_actions_kb(False))

@dp.callback_query(F.data == "checkout")
async def checkout(call: types.CallbackQuery):
    uid = call.from_user.id
    cart = carts.get(uid, [])
    if not cart:
        await call.answer("–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.", show_alert=True)
        return
    lines = [f"‚Ä¢ {escape(p)} ‚Äî {v} –º–ª" for p, v in cart]
    cart_text = "\n".join(lines)
    total_items = len(cart)
    await call.message.edit_text(
        "‚úÖ –ó–∞–∫–∞–∑ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø—Ä–æ–¥–∞–≤—Ü—É.\n"
        "‚ÑπÔ∏è –ü—Ä–æ–¥–∞–≤–µ—Ü —É—Ç–æ—á–Ω–∏—Ç –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –∏ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏.\n\n"
        "<b>–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:</b>\n" + cart_text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üì® –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø—Ä–æ–¥–∞–≤—Ü–æ–º", url=SELLER_LINK)],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="back_to_menu")],
        ])
    )
    username = call.from_user.username
    profile_link = f"https://t.me/{username}" if username else f"tg://user?id={uid}"
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –∫–ª–∏–µ–Ω—Ç—É", url=profile_link)]
    ])
    await bot.send_message(
        ADMIN_ID,
        "üì© <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ (—Ä–æ—Å–ø–∏–≤)</b>\n\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username or '–±–µ–∑_username'}\n"
        f"üÜî ID: <code>{uid}</code>\n"
        f"üßæ –ü–æ–∑–∏—Ü–∏–∏: <b>{total_items}</b>\n\n"
        f"{cart_text}",
        reply_markup=kb
    )
    carts[uid] = []
    current_perfume[uid] = ""

# ----------- –ì–û–¢–û–í–´–ï –ù–ê–ë–û–†–´ -----------
@dp.callback_query(F.data == "show_kits")
async def show_kits(call: types.CallbackQuery):
    if not KITS:
        await call.message.edit_text(
            "–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–∞–±–æ—Ä–æ–≤.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="back_to_menu")]
            ])
        )
        return
    await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ç–æ–≤—ã–π –Ω–∞–±–æ—Ä:", reply_markup=kits_list_kb())

@dp.callback_query(F.data.startswith("kit_view_"))
async def kit_view(call: types.CallbackQuery):
    try:
        idx = int(call.data.split("_")[-1])
        kit = KITS[idx]
    except Exception:
        await call.answer("–ù–∞–±–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    lines = [f"‚Ä¢ {escape(p)} ‚Äî <b>{v} –º–ª</b>" for p, v in kit["items"]]
    caption = f"{kit['title']}\n\n" + "\n".join(lines)

    # –æ—Ç–ø—Ä–∞–≤–∏–º –∫–∞—Ä—Ç–æ—á–∫—É —Ñ–æ—Ç–æ + –ø–æ–¥–ø–∏—Å—å –∫–∞–∫ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if kit.get("photo"):
        await call.message.answer_photo(
            photo=kit["photo"],
            caption=caption,
            parse_mode="HTML",
            reply_markup=kit_view_kb(idx)
        )
    else:
        await call.message.answer(caption, parse_mode="HTML", reply_markup=kit_view_kb(idx))

@dp.callback_query(F.data.startswith("kit_add_"))
async def kit_add(call: types.CallbackQuery):
    uid = call.from_user.id
    carts.setdefault(uid, [])
    try:
        idx = int(call.data.split("_")[-1])
        kit = KITS[idx]
    except Exception:
        await call.answer("–ù–∞–±–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    for perfume, vol in kit["items"]:
        carts[uid].append((perfume, vol))

    added_list = "\n".join([f"‚Ä¢ {escape(p)} ‚Äî <b>{v} –º–ª</b>" for p, v in kit["items"]])
    await call.message.edit_text(
        f"‚úÖ –í –∫–æ—Ä–∑–∏–Ω—É –¥–æ–±–∞–≤–ª–µ–Ω –Ω–∞–±–æ—Ä:\n<b>{kit['title']}</b>\n\n{added_list}\n\n–ß—Ç–æ –¥–∞–ª—å—à–µ?",
        reply_markup=after_add_item_kb()
    )

@dp.callback_query(F.data == "back_to_menu")
async def back_to_menu(call: types.CallbackQuery):
    uid = call.from_user.id
    waiting_for_perfume[uid] = False
    waiting_for_full_bottle[uid] = False
    current_perfume[uid] = ""
    await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –ø–æ–∫—É–ø–∫–∏:", reply_markup=main_menu_kb())

# ----------- –¶–ï–õ–´–ô –§–õ–ê–ö–û–ù -----------
@dp.callback_query(F.data == "buy_full")
async def buy_full(call: types.CallbackQuery):
    uid = call.from_user.id
    waiting_for_full_bottle[uid] = True
    waiting_for_perfume[uid] = False
    current_perfume[uid] = ""
    await call.message.edit_text(
        "üíé –í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–æ–∫—É–ø–∫—É —Ü–µ–ª–æ–≥–æ —Ñ–ª–∞–∫–æ–Ω–∞.\n\n"
        "‚úçÔ∏è <b>–ù–∞–ø–∏—à–∏—Ç–µ</b>:\n"
        "‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ –ø–∞—Ä—Ñ—é–º–∞\n"
        "‚Ä¢ –ñ–µ–ª–∞–µ–º—ã–π –æ–±—ä—ë–º\n\n"
        "‚ÑπÔ∏è –ü—Ä–æ–¥–∞–≤–µ—Ü —É—Ç–æ—á–Ω–∏—Ç –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –∏ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üì® –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø—Ä–æ–¥–∞–≤—Ü–æ–º", url=SELLER_LINK)],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="back_to_menu")],
        ])
    )

# ----------- –í–´–î–ê–ß–ê file_id —Ñ–æ—Ç–æ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞) -----------
@dp.message(F.photo)
async def admin_photo_id_echo(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return
    fid = message.photo[-1].file_id
    await message.answer(f"file_id: <code>{fid}</code>")

@dp.message(F.media_group_id)
async def admin_album_ids(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return
    if message.photo:
        fid = message.photo[-1].file_id
        await message.answer(f"(album) file_id: <code>{fid}</code>")

# ------------------ –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ------------------
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
