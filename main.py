import os
import asyncio
import logging
from typing import Dict, List, Tuple

from aiogram.client.default import DefaultBotProperties
from aiogram import Bot, Dispatcher, F, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from dotenv import load_dotenv

# ------------------ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ------------------
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID_ENV = os.getenv("ADMIN_ID")

if not BOT_TOKEN:
    raise RuntimeError("BOT_TOKEN –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ .env")
if not ADMIN_ID_ENV:
    raise RuntimeError("ADMIN_ID –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ .env")

ADMIN_ID = int(ADMIN_ID_ENV)

logging.basicConfig(level=logging.INFO)
bot = Bot(BOT_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()

# ------------------ –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π ------------------
carts: Dict[int, List[Tuple[str, int]]] = {}
waiting_for_perfume: Dict[int, bool] = {}
current_perfume: Dict[int, str] = {}
waiting_for_full_bottle: Dict[int, bool] = {}

# ------------------ –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ------------------
def main_menu_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üíâ –ö—É–ø–∏—Ç—å –Ω–∞ —Ä–æ—Å–ø–∏–≤", callback_data="buy_split")],
        [InlineKeyboardButton(text="üíé –ö—É–ø–∏—Ç—å —Ü–µ–ª—ã–π —Ñ–ª–∞–∫–æ–Ω", callback_data="buy_full")],
        [InlineKeyboardButton(text="üõí –ú–æ—è –∫–æ—Ä–∑–∏–Ω–∞", callback_data="show_cart")],
        [InlineKeyboardButton(text="üì® –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø—Ä–æ–¥–∞–≤—Ü–æ–º", url=f"https://t.me/{ADMIN_ID}")]
    ])

def volumes_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üíß 5 –º–ª",  callback_data="volume_5"),
            InlineKeyboardButton(text="üß™ 8 –º–ª",  callback_data="volume_8"),
            InlineKeyboardButton(text="üíé 18 –º–ª", callback_data="volume_18"),
        ]
    ])

def after_add_item_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë –∞—Ä–æ–º–∞—Ç", callback_data="add_more")],
        [InlineKeyboardButton(text="üõí –ú–æ—è –∫–æ—Ä–∑–∏–Ω–∞",          callback_data="show_cart")],
        [InlineKeyboardButton(text="‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑",       callback_data="checkout")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –í –º–µ–Ω—é",               callback_data="back_to_menu")],
    ])

def cart_actions_kb(has_items: bool) -> InlineKeyboardMarkup:
    rows = []
    if has_items:
        rows.append([InlineKeyboardButton(text="‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="checkout")])
        rows.append([InlineKeyboardButton(text="üßπ –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data="clear_cart")])
    rows.append([InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë –∞—Ä–æ–º–∞—Ç", callback_data="add_more")])
    rows.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="back_to_menu")])
    return InlineKeyboardMarkup(inline_keyboard=rows)

# ------------------ –•—ç–Ω–¥–ª–µ—Ä—ã ------------------
@dp.message(Command("start"))
async def start_cmd(message: types.Message):
    waiting_for_perfume[message.from_user.id] = False
    waiting_for_full_bottle[message.from_user.id] = False
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞—Ä—Ñ—é–º–µ—Ä–Ω—ã–π –±–æ—Ç!\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –ø–æ–∫—É–ø–∫–∏:",
        reply_markup=main_menu_kb()
    )

@dp.message(Command("menu"))
async def menu_cmd(message: types.Message):
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_kb())

# ----------- –†–û–°–ü–ò–í -----------
@dp.callback_query(F.data == "buy_split")
async def buy_split(call: types.CallbackQuery):
    uid = call.from_user.id
    carts.setdefault(uid, [])
    waiting_for_perfume[uid] = True
    waiting_for_full_bottle[uid] = False
    await call.message.edit_text(
        "üß¥ –í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–æ–∫—É–ø–∫—É –Ω–∞ —Ä–æ—Å–ø–∏–≤.\n\n"
        "‚úçÔ∏è <b>–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞—Ä–æ–º–∞—Ç–∞</b>, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üõí –ú–æ—è –∫–æ—Ä–∑–∏–Ω–∞", callback_data="show_cart")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="back_to_menu")]
        ])
    )

@dp.message(F.text)
async def on_text(message: types.Message):
    uid = message.from_user.id

    if waiting_for_full_bottle.get(uid):
        username = message.from_user.username
        profile_link = f"https://t.me/{username}" if username else f"tg://user?id={uid}"
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –∫–ª–∏–µ–Ω—Ç—É", url=profile_link)]
        ])
        await bot.send_message(
            ADMIN_ID,
            "üì© <b>–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ü–µ–ª—ã–π —Ñ–ª–∞–∫–æ–Ω</b>\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username or '–±–µ–∑_username'}\n"
            f"üÜî ID: <code>{uid}</code>\n"
            f"‚úçÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ: {message.html_text}",
            reply_markup=kb
        )
        waiting_for_full_bottle[uid] = False
        await message.answer(
            "‚úÖ –°–ø–∞—Å–∏–±–æ! –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø—Ä–æ–¥–∞–≤—Ü—É.\n‚ÑπÔ∏è –ü—Ä–æ–¥–∞–≤–µ—Ü —É—Ç–æ—á–Ω–∏—Ç —Ü–µ–Ω—É –∏ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏."
        )
        return

    if waiting_for_perfume.get(uid):
        perfume = message.text.strip()
        if not perfume:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞—Ä–æ–º–∞—Ç–∞ —Ç–µ–∫—Å—Ç–æ–º.")
            return
        current_perfume[uid] = perfume
        waiting_for_perfume[uid] = False
        await message.answer(
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∞—Ä–æ–º–∞—Ç: <b>{perfume}</b>\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä—ë–º üëá",
            reply_markup=volumes_kb()
        )
        return

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é:", reply_markup=main_menu_kb())

@dp.callback_query(F.data.startswith("volume_"))
async def choose_volume(call: types.CallbackQuery):
    uid = call.from_user.id
    perfume = current_perfume.get(uid)
    if not perfume:
        await call.answer("–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞—Ä–æ–º–∞—Ç–∞.", show_alert=True)
        return
    volume_map = {"volume_5": 5, "volume_8": 8, "volume_18": 18}
    volume = volume_map.get(call.data, 0)
    carts.setdefault(uid, []).append((perfume, volume))
    current_perfume[uid] = ""
    await call.message.edit_text(
        f"‚úÖ –í –∫–æ—Ä–∑–∏–Ω—É –¥–æ–±–∞–≤–ª–µ–Ω–æ: <b>{perfume}</b> ‚Äî <b>{volume} –º–ª</b>.\n–ß—Ç–æ –¥–∞–ª—å—à–µ?",
        reply_markup=after_add_item_kb()
    )

@dp.callback_query(F.data == "add_more")
async def add_more(call: types.CallbackQuery):
    uid = call.from_user.id
    waiting_for_perfume[uid] = True
    await call.message.edit_text(
        "‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∞—Ä–æ–º–∞—Ç–∞.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üõí –ú–æ—è –∫–æ—Ä–∑–∏–Ω–∞", callback_data="show_cart")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="back_to_menu")]
        ])
    )

@dp.callback_query(F.data == "show_cart")
async def show_cart(call: types.CallbackQuery):
    uid = call.from_user.id
    cart = carts.get(uid, [])
    if not cart:
        await call.message.edit_text("üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.", reply_markup=cart_actions_kb(False))
        return
    lines = [f"‚Ä¢ {p} ‚Äî <b>{v} –º–ª</b>" for p, v in cart]
    text = "üõí <b>–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞</b>:\n\n" + "\n".join(lines)
    await call.message.edit_text(text, reply_markup=cart_actions_kb(True))

@dp.callback_query(F.data == "clear_cart")
async def clear_cart(call: types.CallbackQuery):
    carts[call.from_user.id] = []
    await call.message.edit_text("üßπ –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞.", reply_markup=cart_actions_kb(False))

@dp.callback_query(F.data == "checkout")
async def checkout(call: types.CallbackQuery):
    uid = call.from_user.id
    cart = carts.get(uid, [])
    if not cart:
        await call.answer("–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.", show_alert=True)
        return
    lines = [f"‚Ä¢ {p} ‚Äî {v} –º–ª" for p, v in cart]
    cart_text = "\n".join(lines)
    await call.message.edit_text(
        "‚úÖ –ó–∞–∫–∞–∑ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø—Ä–æ–¥–∞–≤—Ü—É.\n‚ÑπÔ∏è –ü—Ä–æ–¥–∞–≤–µ—Ü —É—Ç–æ—á–Ω–∏—Ç —Ü–µ–Ω—É.\n\n<b>–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:</b>\n" + cart_text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="back_to_menu")]
        ])
    )
    username = call.from_user.username
    profile_link = f"https://t.me/{username}" if username else f"tg://user?id={uid}"
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –∫–ª–∏–µ–Ω—Ç—É", url=profile_link)]
    ])
    await bot.send_message(
        ADMIN_ID,
        "üì© <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ (—Ä–æ—Å–ø–∏–≤)</b>\n\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username or '–±–µ–∑_username'}\nüÜî ID: <code>{uid}</code>\n\n{cart_text}",
        reply_markup=kb
    )
    carts[uid] = []

@dp.callback_query(F.data == "back_to_menu")
async def back_to_menu(call: types.CallbackQuery):
    waiting_for_perfume[call.from_user.id] = False
    waiting_for_full_bottle[call.from_user.id] = False
    current_perfume[call.from_user.id] = ""
    await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –ø–æ–∫—É–ø–∫–∏:", reply_markup=main_menu_kb())

# ----------- –¶–ï–õ–´–ô –§–õ–ê–ö–û–ù -----------
@dp.callback_query(F.data == "buy_full")
async def buy_full(call: types.CallbackQuery):
    uid = call.from_user.id
    waiting_for_full_bottle[uid] = True
    waiting_for_perfume[uid] = False
    current_perfume[uid] = ""
    await call.message.edit_text(
        "üíé –í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–æ–∫—É–ø–∫—É —Ü–µ–ª–æ–≥–æ —Ñ–ª–∞–∫–æ–Ω–∞.\n\n"
        "‚úçÔ∏è <b>–ù–∞–ø–∏—à–∏—Ç–µ</b> –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞—Ä—Ñ—é–º–∞ –∏ –∂–µ–ª–∞–µ–º—ã–π –æ–±—ä—ë–º.\n"
        "‚ÑπÔ∏è –ü—Ä–æ–¥–∞–≤–µ—Ü —É—Ç–æ—á–Ω–∏—Ç –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –∏ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="back_to_menu")]
        ])
    )

# ----------- –í–´–î–ê–ß–ê file_id —Ñ–æ—Ç–æ -----------
@dp.message(F.photo)
async def admin_photo_id_echo(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return
    fid = message.photo[-1].file_id
    await message.answer(f"file_id: <code>{fid}</code>")

@dp.message(F.media_group_id)
async def admin_album_ids(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return
    if message.photo:
        fid = message.photo[-1].file_id
        await message.answer(f"(album) file_id: <code>{fid}</code>")

# ------------------ –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ------------------
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
