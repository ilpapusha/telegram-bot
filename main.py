import os
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram import Router
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–∫–µ–Ω –∏ ID –∞–¥–º–∏–Ω–∞ –∏–∑ .env
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID"))

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())
router = Router()
dp.include_router(router)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class OrderStates(StatesGroup):
    waiting_for_screenshot = State()

# –ö–Ω–æ–ø–∫–∏
main_kb = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="üõí –ö—É–ø–∏—Ç—å")]],
    resize_keyboard=True
)

cancel_kb = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]],
    resize_keyboard=True
)

contact_kb = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø—Ä–æ–¥–∞–≤—Ü–æ–º")]],
    resize_keyboard=True
)

# –°—Ç–∞—Ä—Ç
@router.message(F.text == "/start")
async def start_cmd(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! üëã\n–ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å —Ç–æ–≤–∞—Ä.\n–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
        reply_markup=main_kb
    )

# –ù–∞–∂–∞–ª–∏ "–ö—É–ø–∏—Ç—å"
@router.message(F.text == "üõí –ö—É–ø–∏—Ç—å")
async def buy_cmd(message: types.Message, state: FSMContext):
    await state.set_state(OrderStates.waiting_for_screenshot)
    await message.answer(
        "–ü–µ—Ä–µ–≤–µ–¥–∏ –¥–µ–Ω—å–≥–∏ –Ω–∞ –∫–∞—Ä—Ç—É:\n\n"
        "üí≥ 1234 5678 9012 3456\n\n"
        "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å —Å—é–¥–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞.",
        reply_markup=cancel_kb
    )

# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç
@router.message(OrderStates.waiting_for_screenshot, F.photo)
async def handle_screenshot(message: types.Message, state: FSMContext):
    user_link = f"tg://user?id={message.from_user.id}"
    caption = (
        f"üÜï –ù–æ–≤—ã–π –ø–ª–∞—Ç—ë–∂!\n\n"
        f"üë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: {message.from_user.full_name}\n"
        f"üîó [–°—Å—ã–ª–∫–∞ –Ω–∞ Telegram]({user_link})"
    )
    # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –∞–¥–º–∏–Ω—É —Ñ–æ—Ç–æ
    await bot.send_photo(
        chat_id=ADMIN_ID,
        photo=message.photo[-1].file_id,
        caption=caption,
        parse_mode="Markdown"
    )

    await message.answer(
        "–°–ø–∞—Å–∏–±–æ! ‚úÖ –ú—ã –ø—Ä–æ–≤–µ—Ä–∏–º –æ–ø–ª–∞—Ç—É –∏ —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ–º—Å—è —Å —Ç–æ–±–æ–π.",
        reply_markup=contact_kb
    )
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–°–≤—è–∑–∞—Ç—å—Å—è —Å –ø—Ä–æ–¥–∞–≤—Ü–æ–º"
@router.message(F.text == "üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø—Ä–æ–¥–∞–≤—Ü–æ–º")
async def contact_seller(message: types.Message):
    await message.answer(
        "–¢—ã –º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å –ø—Ä–æ–¥–∞–≤—Ü—É –Ω–∞–ø—Ä—è–º—É—é: "
        f"[–ü–µ—Ä–µ–π—Ç–∏ –≤ —á–∞—Ç](tg://user?id={ADMIN_ID})",
        parse_mode="Markdown"
    )

# –û—Ç–º–µ–Ω–∞
@router.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∞")
async def cancel_cmd(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ. –í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=main_kb)

# –ó–∞–ø—É—Å–∫
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
